# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#
# Copyright (C) 2019 P3TERX
#
# Copyright (C) 2020 KFERMercer
#
name: immortalwrt-R66s-23

on:
  push:
    branches: 
      - master
  schedule:
    - cron: 0 21 * * *

permissions:
  contents: read

jobs:

  build_openwrt:

    name: Build OpenWrt Firmware

    runs-on: ubuntu-latest

    steps:
      - name: Space cleanup and Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-mark hold grub-efi-amd64-signed
          sudo -E apt update
          sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* snap*
          sudo -E apt -y full-upgrade
          sudo -E apt -y install build-essential git libncurses5-dev libpython3-dev python3-pyelftools swig
          sudo -E systemctl daemon-reload
          sudo -E apt -y autoremove --purge
          sudo -E apt autoclean
          sudo -E apt clean
          sudo -E timedatectl set-timezone "Asia/Shanghai"

      - name: Checkout OpenWrt
        uses: actions/checkout@v3

      - name: Download and Extract Source Code
        run: |
          rm -rf .git/ .github/ *
          OPENWRT_LATEST=$(curl -s "https://api.github.com/repos/immortalwrt/immortalwrt/tags" | grep '"name": "v23' | head -n 1 | cut -d '"' -f 4)
          CLASH_LATEST=$(curl -s "https://api.github.com/repos/vernesong/OpenClash/tags" | grep 'name' | head -n 1 | cut -d '"' -f 4)
          echo "Downloading $OPENWRT_LATEST... and $CLASH_LATEST "
          wget "https://github.com/immortalwrt/immortalwrt/archive/refs/tags/$OPENWRT_LATEST.zip" -O openwrt_latest.zip
          wget "https://github.com/vernesong/OpenClash/archive/refs/tags/$CLASH_LATEST.zip" -O openclash_latest.zip
          OP_TAG=$(echo "$OPENWRT_LATEST" | sed 's/^v//')
          CA_TAG=$(echo "$CLASH_LATEST" | sed 's/^v//')
          echo "Extracting version: $OP_TAG and $CA_TAG"
          unzip -q openwrt_latest.zip -d .
          unzip -q openclash_latest.zip -d .
          mv "immortalwrt-$OP_TAG"/* .
          mv "OpenClash-$CA_TAG"/luci-app-openclash package/
          rm -rf "immortalwrt-$OP_TAG" "OpenClash-$CA_TAG" openwrt_latest.zip openclash_latest.zip

      - name: Update feeds
        run: |
          ./scripts/feeds update -a
          rm -rf feeds/luci/applications/luci-app-openclash/
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Generate configuration file
        run: |
          rm -f ./.config*
          touch ./.config

          cat >> .config <<EOF
          CONFIG_TARGET_rockchip=y
          CONFIG_TARGET_rockchip_armv8=y
          CONFIG_TARGET_rockchip_armv8_DEVICE_lunzn_fastrhino-r66s=y
          CONFIG_PACKAGE_kmod-tcp-bbr=y
          CONFIG_PACKAGE_luci-app-acme=y
          CONFIG_PACKAGE_luci-app-ddns-go=y
          # CONFIG_PACKAGE_luci-app-diskman_INCLUDE_btrfs_progs is not set
          # CONFIG_PACKAGE_luci-app-diskman_INCLUDE_lsblk is not set
          CONFIG_PACKAGE_luci-app-ksmbd=y
          CONFIG_PACKAGE_luci-app-openclash=y
          CONFIG_PACKAGE_luci-app-openvpn=y
          # CONFIG_PACKAGE_luci-app-rclone_INCLUDE_rclone-ng is not set
          # CONFIG_PACKAGE_luci-app-rclone_INCLUDE_rclone-webui is not set
          CONFIG_PACKAGE_luci-app-upnp=y
          CONFIG_PACKAGE_luci-app-vlmcsd=y
          CONFIG_PACKAGE_luci-proto-wireguard=y
          CONFIG_PACKAGE_openvpn-openssl=y
          CONFIG_TARGET_ROOTFS_PARTSIZE=1024
          EOF

          #
          # ===============================================================
          # 

          sed -i 's/^[ \t]*//g' ./.config
          make defconfig

      - name: Download packages
        run: make download -j16

      - name: Compile firmware
        run: |
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin

      - name: Prepare artifact
        run: |
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/

      - name: Upload buildinfo
        uses: actions/upload-artifact@v3
        with:
          name: OpenWrt_buildinfo
          path: ./artifact/buildinfo/

      - name: Upload package
        uses: actions/upload-artifact@v3
        with:
          name: OpenWrt_package
          path: ./artifact/package/

      - name: Upload firmware
        uses: actions/upload-artifact@v3
        with:
          name: OpenWrt_firmware
          path: ./bin/targets/
